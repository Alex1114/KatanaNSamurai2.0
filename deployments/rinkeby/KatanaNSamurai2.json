{
  "address": "0xCB65F8E529bE16b3e2fc647d1B6890521676aAae",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numClaims",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaim",
          "type": "uint256"
        }
      ],
      "name": "claimEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numPurchase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSale",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_PRESALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SAMURAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "claimSamurai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveawayMintSamurai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasClaimeStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasPresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPresaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxClaimNumOnPresale",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "isPresaleEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaimNumOnPresale",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintPresaleSamurai",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numPurchase",
          "type": "uint256"
        }
      ],
      "name": "mintSamurai",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_PS_num",
          "type": "uint256"
        }
      ],
      "name": "setMAX_PRESALE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_num",
          "type": "uint256"
        }
      ],
      "name": "setMAX_SAMURAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set_PRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8208ec79ec9eb8229f21ecc12f1ce00457a6f95f26fb89c6770cd2bdd9eb05c3",
  "receipt": {
    "to": null,
    "from": "0xbd42A2035D41b450eE7106C9F9C0C736fb546226",
    "contractAddress": "0xCB65F8E529bE16b3e2fc647d1B6890521676aAae",
    "transactionIndex": 56,
    "gasUsed": "5591924",
    "logsBloom": "0x
    "blockHash": "0xa19fdf5434aff9a93539433fdf6fa5bb6e343abd8d70357826f878608692919d",
    "transactionHash": "0x8208ec79ec9eb8229f21ecc12f1ce00457a6f95f26fb89c6770cd2bdd9eb05c3",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 9692997,
        "transactionHash": "0x8208ec79ec9eb8229f21ecc12f1ce00457a6f95f26fb89c6770cd2bdd9eb05c3",
        "address": "0xCB65F8E529bE16b3e2fc647d1B6890521676aAae",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd42a2035d41b450ee7106c9f9c0c736fb546226"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0xa19fdf5434aff9a93539433fdf6fa5bb6e343abd8d70357826f878608692919d"
      }
    ],
    "blockNumber": 9692997,
    "cumulativeGasUsed": "16722972",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "895b6eb22ab1aaec946c61681b413cfa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numClaims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSale\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PRESALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SAMURAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"claimSamurai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveawayMintSamurai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClaimeStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPresaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxClaimNumOnPresale\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"isPresaleEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimNumOnPresale\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintPresaleSamurai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numPurchase\",\"type\":\"uint256\"}],\"name\":\"mintSamurai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_PS_num\",\"type\":\"uint256\"}],\"name\":\"setMAX_PRESALE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_num\",\"type\":\"uint256\"}],\"name\":\"setMAX_SAMURAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KatanaNSamurai2.sol\":\"KatanaNSamurai2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/KatanaNSamurai2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n//  _  __ _   _   _____   ___       ___\\n// | |/ /| \\\\ | | / ____| |__ \\\\     / _ \\\\\\n// | ' / |  \\\\| || (___      ) |   | | | |\\n// |  <  | . ` | \\\\___ \\\\    / /    | | | |\\n// | . \\\\ | |\\\\  | ____) |  / /_  _ | |_| |\\n// |_|\\\\_\\\\|_| \\\\_||_____/  |____|(_) \\\\___/\\n\\ninterface KNS1Interface {\\n  function tokensOfOwner(address _owner) external view returns(uint256[] memory );\\n}\\n\\ncontract KatanaNSamurai2 is Ownable, EIP712, ERC721Enumerable {\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Interface\\n    // ------------------------------------------------------------------------\\n\\taddress KNS1Address = 0xD6499Dac79a48cf21B7a6344a551A52DA943E10c;\\n  \\tKNS1Interface KNS1Contract = KNS1Interface(KNS1Address);\\n\\n    // Sales variables\\n    // ------------------------------------------------------------------------\\n\\tuint public MAX_SAMURAI = 10640;\\n\\tuint public MAX_PRESALE = 6000; \\n\\tuint public PRICE = 0.05 ether;\\n\\tuint public numPresale = 0;\\n    uint public numTokens = 2000;\\n\\tuint public numClaim = 0;\\n\\tbool public hasSaleStarted = true;\\n\\tbool public hasPresaleStarted = true;\\n\\tbool public hasClaimeStarted = true;\\n\\tstring private _baseTokenURI = \\\"http://api.katanansamurai.art/Metadata/\\\";\\n\\n\\tmapping (address => uint256) public hasClaimed;\\n\\tmapping (address => uint256) public hasPresale;\\n\\n    // Events\\n    // ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 numPurchase, uint256 totalSale);\\n\\tevent claimEvent(address owner, uint256 numClaims, uint256 totalClaim);\\n\\t\\n\\t// Constructor\\n    // ------------------------------------------------------------------------\\n\\tconstructor()\\n\\tEIP712(\\\"Katana N Samurai 2\\\", \\\"1.0.0\\\")  \\n\\tERC721(\\\"Katana N Samurai 2\\\", \\\"KNS2.0\\\"){}\\n\\n\\t// Claim functions\\n    // ------------------------------------------------------------------------\\n\\tfunction claimSamurai(uint256 quantity) external {\\n\\t\\tuint256[] memory tokenId = KNS1Contract.tokensOfOwner(msg.sender);\\n\\n\\t\\trequire(hasPresaleStarted == true, \\\"Claime hasn't started.\\\");\\n\\t\\trequire(quantity > 0 && hasClaimed[msg.sender].add(quantity) <= tokenId.length, \\\"Exceed the quantity that can be claimed\\\");\\n\\n\\t\\tfor (uint i = 0; i < quantity; i++) {\\n\\t\\t\\thasClaimed[msg.sender] = hasClaimed[msg.sender].add(1);\\n\\t\\t\\t_safeMint(msg.sender, tokenId[hasClaimed[msg.sender].sub(1)]);\\n\\t\\t\\tnumClaim = numClaim.add(1);\\n\\t\\t}\\n\\n\\t\\temit claimEvent(msg.sender, quantity, numClaim);\\n\\t}\\n\\n\\t// Presale functions\\n    // ------------------------------------------------------------------------\\n    function isPresaleEligible(uint256 maxClaimNumOnPresale, bytes memory SIGNATURE) public view returns (bool){\\n        address recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForPresaleClaim,uint256 maxClaimNumOnPresale)\\\"), _msgSender(), maxClaimNumOnPresale))), SIGNATURE);\\n\\n        return owner() == recoveredAddr;\\n    }\\n\\n    function mintPresaleSamurai(uint256 quantity, uint256 maxClaimNumOnPresale, bytes memory SIGNATURE) external payable{\\n\\t\\trequire(hasPresaleStarted == true, \\\"Presale hasn't started.\\\");\\n        require(isPresaleEligible(maxClaimNumOnPresale, SIGNATURE), \\\"Not eligible for presale.\\\");\\n        require(quantity > 0 && hasPresale[msg.sender].add(quantity) <= maxClaimNumOnPresale, \\\"Exceeds max presale number.\\\");\\n        require(msg.value >= PRICE.mul(quantity), \\\"Ether value sent is below the price.\\\");\\n        require(totalSupply().add(quantity) <= MAX_SAMURAI, \\\"Exceeds the MAX_SAMURAI.\\\");\\n\\n\\t\\tfor (uint i = 0; i < quantity; i++) {\\n\\t\\t\\tnumTokens = numTokens.add(1);\\n\\t\\t\\t_safeMint(msg.sender, numTokens);\\n\\t\\t}\\n\\n\\t\\thasPresale[msg.sender] = hasPresale[msg.sender].add(quantity);\\n\\t\\tnumPresale = numPresale.add(quantity);\\n\\n\\t\\temit mintEvent(msg.sender, quantity, numTokens);\\n    }\\n\\n\\t// Giveaway functions\\n    // ------------------------------------------------------------------------\\n\\tfunction giveawayMintSamurai(address _to, uint256 quantity) external onlyOwner{\\n\\t\\trequire(totalSupply().add(quantity) <= MAX_SAMURAI, \\\"Exceeds MAX_SAMURAI.\\\");\\n\\n\\t\\tfor (uint i = 0; i < quantity; i++) {\\n\\t\\t\\tnumTokens = numTokens.add(1);\\n\\t\\t\\t_safeMint(_to, numTokens);\\n\\t\\t}\\n\\n\\t\\temit mintEvent(_to, quantity, numTokens);\\n\\t}\\n\\n\\t// Mint functions\\n    // ------------------------------------------------------------------------\\n\\tfunction mintSamurai(uint256 numPurchase) external payable {\\n\\t\\trequire(hasSaleStarted == true, \\\"Sale hasn't started.\\\");\\n\\t\\trequire(numPurchase > 0 && numPurchase <= 50, \\\"You can mint minimum 1, maximum 50 samurais.\\\");\\n\\t\\trequire(totalSupply().add(numPurchase) <= MAX_SAMURAI, \\\"Sold out!\\\");\\n\\t\\trequire(msg.value >= PRICE.mul(numPurchase), \\\"Ether value sent is below the price.\\\");\\n\\n\\t\\tfor (uint i = 0; i < numPurchase; i++) {\\n\\t\\t\\tnumTokens = numTokens.add(1);\\n\\t\\t\\t_safeMint(msg.sender, numTokens);\\n\\t\\t}\\n\\n\\t\\temit mintEvent(msg.sender, numPurchase, numTokens);\\n\\t}\\n\\n    // Base URI Functions\\n    // ------------------------------------------------------------------------\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n        require(_exists(tokenId), \\\"TOKEN_NOT_EXISTS\\\");\\n        \\n        return string(abi.encodePacked(_baseTokenURI, tokenId.toString()));\\n    }\\n\\n\\tfunction tokensOfOwner(address _owner) external view returns(uint256[] memory ) {\\n\\t\\tuint256 tokenCount = balanceOf(_owner);\\n\\t\\t\\n\\t\\tif (tokenCount == 0) {\\n\\t\\t\\treturn new uint256[](0);\\n\\t\\t} else {\\n\\t\\t\\tuint256[] memory result = new uint256[](tokenCount);\\n\\t\\t\\tuint256 index;\\n\\t\\t\\tfor (index = 0; index < tokenCount; index++) {\\n\\t\\t\\t\\tresult[index] = tokenOfOwnerByIndex(_owner, index);\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\n    // setting functions\\n    // ------------------------------------------------------------------------\\n    function setURI(string calldata _tokenURI) external onlyOwner {\\n        _baseTokenURI = _tokenURI;\\n    }\\n\\n\\tfunction setMAX_SAMURAI(uint _MAX_num) public onlyOwner {\\n\\t\\tMAX_SAMURAI = _MAX_num;\\n\\t}\\n\\n\\tfunction setMAX_PRESALE(uint _MAX_PS_num) public onlyOwner {\\n\\t\\tMAX_PRESALE = _MAX_PS_num;\\n\\t}\\n\\n\\tfunction set_PRICE(uint _price) public onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n\\tfunction startSale() public onlyOwner {\\n\\t\\thasSaleStarted = true;\\t\\t\\n\\t}\\n\\n\\tfunction startPresale() public onlyOwner {\\n\\t\\thasPresaleStarted = true;\\n\\t}\\n\\n\\tfunction pauseSale() public onlyOwner {\\n\\t\\thasSaleStarted = false;\\n\\t}\\n\\n\\tfunction pausePresale() public onlyOwner {\\n\\t\\thasPresaleStarted = false;\\n\\t}\\n\\n\\t// Withdrawal functions\\n    // ------------------------------------------------------------------------\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(msg.sender).send(address(this).balance));\\n\\t}\\n}\\n  \",\"keccak256\":\"0xaac4769f8a4d1b2f2677c2627ae34ea2d5087ef45ac6959b5b3c47db1271c08d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405273d6499dac79a48cf21b7a6344a551a52da943e10c600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612990600d55611770600e5566b1a2bc2ec50000600f5560006010556107d060115560006012556001601360006101000a81548160ff0219169083151502179055506001601360016101000a81548160ff0219169083151502179055506001601360026101000a81548160ff021916908315150217905550604051806060016040528060278152602001620065636027913960149080519060200190620001669291906200042c565b503480156200017457600080fd5b506040518060400160405280601281526020017f4b6174616e61204e2053616d75726169203200000000000000000000000000008152506040518060400160405280600681526020017f4b4e53322e3000000000000000000000000000000000000000000000000000008152506040518060400160405280601281526020017f4b6174616e61204e2053616d75726169203200000000000000000000000000008152506040518060400160405280600581526020017f312e302e300000000000000000000000000000000000000000000000000000008152506200026d620002616200032460201b60201c565b6200032c60201b60201c565b60008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260c081815250508160e081815250504660a08181525050620002d5818484620003f060201b60201c565b6080818152505080610100818152505050505050508160019080519060200190620003029291906200042c565b5080600290805190602001906200031b9291906200042c565b50505062000619565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600083838346306040516020016200040d9594939291906200050f565b6040516020818303038152906040528051906020012090509392505050565b8280546200043a90620005b4565b90600052602060002090601f0160209004810192826200045e5760008555620004aa565b82601f106200047957805160ff1916838001178555620004aa565b82800160010185558215620004aa579182015b82811115620004a95782518255916020019190600101906200048c565b5b509050620004b99190620004bd565b5090565b5b80821115620004d8576000816000905550600101620004be565b5090565b620004e7816200056c565b82525050565b620004f88162000580565b82525050565b6200050981620005aa565b82525050565b600060a082019050620005266000830188620004ed565b620005356020830187620004ed565b620005446040830186620004ed565b620005536060830185620004fe565b620005626080830184620004dc565b9695505050505050565b600062000579826200058a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006002820490506001821680620005cd57607f821691505b60208210811415620005e457620005e3620005ea565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60805160a05160c05160e05161010051615f056200065e6000396000613063015260006130a50152600061308401526000613010015260006130380152615f056000f3fe6080604052600436106102725760003560e01c80636456c2051161014f57806395d89b41116100c1578063c87b56dd1161007a578063c87b56dd14610905578063de9af03814610942578063e136fe731461096b578063e985e9c514610994578063f2fde38b146109d1578063f69b66ef146109fa57610272565b806395d89b411461082a578063a22cb46514610855578063b02200151461087e578063b66a0e5d146108a9578063b6791cfa146108c0578063b88d4fde146108dc57610272565b80638462151c116101135780638462151c14610737578063853828b614610774578063872b25b01461077e5780638d859f3e146107a95780638da5cb5b146107d45780638e499bcf146107ff57610272565b80636456c2051461064057806369cff3471461066957806370a08231146106a6578063715018a6146106e357806373b2e80e146106fa57610272565b80631c8b232d116101e85780634d4c4e99116101ac5780634d4c4e991461052e5780634f6ccce714610559578063544657731461059657806355367ba9146105c15780635edbad0a146105d85780636352211e1461060357610272565b80631c8b232d1461045857806323b872dd146104835780632bf831f0146104ac5780632f745c59146104c857806342842e0e1461050557610272565b806306fdde031161023a57806306fdde0314610348578063070f5c0914610373578063081812fc1461038a578063095ea7b3146103c757806317376bfa146103f057806318160ddd1461042d57610272565b806301ffc9a71461027757806302fe5305146102b457806304c98b2b146102dd57806304f60205146102f4578063063315921461031f575b600080fd5b34801561028357600080fd5b5061029e60048036038101906102999190614320565b610a23565b6040516102ab9190614c65565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190614372565b610a9d565b005b3480156102e957600080fd5b506102f2610b2f565b005b34801561030057600080fd5b50610309610bc8565b6040516103169190614c65565b60405180910390f35b34801561032b57600080fd5b50610346600480360381019061034191906143b7565b610bdb565b005b34801561035457600080fd5b5061035d610c61565b60405161036a9190614d4f565b60405180910390f35b34801561037f57600080fd5b50610388610cf3565b005b34801561039657600080fd5b506103b160048036038101906103ac91906143b7565b610d8c565b6040516103be9190614ba5565b60405180910390f35b3480156103d357600080fd5b506103ee60048036038101906103e991906142a3565b610e11565b005b3480156103fc57600080fd5b50610417600480360381019061041291906143e0565b610f29565b6040516104249190614c65565b60405180910390f35b34801561043957600080fd5b50610442610fd0565b60405161044f9190615191565b60405180910390f35b34801561046457600080fd5b5061046d610fdd565b60405161047a9190614c65565b60405180910390f35b34801561048f57600080fd5b506104aa60048036038101906104a5919061419d565b610ff0565b005b6104c660048036038101906104c19190614434565b611050565b005b3480156104d457600080fd5b506104ef60048036038101906104ea91906142a3565b61137d565b6040516104fc9190615191565b60405180910390f35b34801561051157600080fd5b5061052c6004803603810190610527919061419d565b611422565b005b34801561053a57600080fd5b50610543611442565b6040516105509190615191565b60405180910390f35b34801561056557600080fd5b50610580600480360381019061057b91906143b7565b611448565b60405161058d9190615191565b60405180910390f35b3480156105a257600080fd5b506105ab6114df565b6040516105b89190615191565b60405180910390f35b3480156105cd57600080fd5b506105d66114e5565b005b3480156105e457600080fd5b506105ed61157e565b6040516105fa9190615191565b60405180910390f35b34801561060f57600080fd5b5061062a600480360381019061062591906143b7565b611584565b6040516106379190614ba5565b60405180910390f35b34801561064c57600080fd5b50610667600480360381019061066291906143b7565b611636565b005b34801561067557600080fd5b50610690600480360381019061068b9190614138565b6116bc565b60405161069d9190615191565b60405180910390f35b3480156106b257600080fd5b506106cd60048036038101906106c89190614138565b6116d4565b6040516106da9190615191565b60405180910390f35b3480156106ef57600080fd5b506106f861178c565b005b34801561070657600080fd5b50610721600480360381019061071c9190614138565b611814565b60405161072e9190615191565b60405180910390f35b34801561074357600080fd5b5061075e60048036038101906107599190614138565b61182c565b60405161076b9190614c43565b60405180910390f35b61077c6119a8565b005b34801561078a57600080fd5b50610793611a64565b6040516107a09190615191565b60405180910390f35b3480156107b557600080fd5b506107be611a6a565b6040516107cb9190615191565b60405180910390f35b3480156107e057600080fd5b506107e9611a70565b6040516107f69190614ba5565b60405180910390f35b34801561080b57600080fd5b50610814611a99565b6040516108219190615191565b60405180910390f35b34801561083657600080fd5b5061083f611a9f565b60405161084c9190614d4f565b60405180910390f35b34801561086157600080fd5b5061087c60048036038101906108779190614267565b611b31565b005b34801561088a57600080fd5b50610893611cb2565b6040516108a09190614c65565b60405180910390f35b3480156108b557600080fd5b506108be611cc5565b005b6108da60048036038101906108d591906143b7565b611d5e565b005b3480156108e857600080fd5b5061090360048036038101906108fe91906141ec565b611f40565b005b34801561091157600080fd5b5061092c600480360381019061092791906143b7565b611fa2565b6040516109399190614d4f565b60405180910390f35b34801561094e57600080fd5b50610969600480360381019061096491906142a3565b61201e565b005b34801561097757600080fd5b50610992600480360381019061098d91906143b7565b612180565b005b3480156109a057600080fd5b506109bb60048036038101906109b69190614161565b612206565b6040516109c89190614c65565b60405180910390f35b3480156109dd57600080fd5b506109f860048036038101906109f39190614138565b61229a565b005b348015610a0657600080fd5b50610a216004803603810190610a1c91906143b7565b612392565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a965750610a95826126eb565b5b9050919050565b610aa56127cd565b73ffffffffffffffffffffffffffffffffffffffff16610ac3611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1090615031565b60405180910390fd5b818160149190610b2a929190613ecf565b505050565b610b376127cd565b73ffffffffffffffffffffffffffffffffffffffff16610b55611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba290615031565b60405180910390fd5b6001601360016101000a81548160ff021916908315150217905550565b601360029054906101000a900460ff1681565b610be36127cd565b73ffffffffffffffffffffffffffffffffffffffff16610c01611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e90615031565b60405180910390fd5b80600d8190555050565b606060018054610c70906154a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9c906154a1565b8015610ce95780601f10610cbe57610100808354040283529160200191610ce9565b820191906000526020600020905b815481529060010190602001808311610ccc57829003601f168201915b5050505050905090565b610cfb6127cd565b73ffffffffffffffffffffffffffffffffffffffff16610d19611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6690615031565b60405180910390fd5b6000601360016101000a81548160ff021916908315150217905550565b6000610d97826127d5565b610dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcd90615011565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610e1c82611584565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490615091565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610eac6127cd565b73ffffffffffffffffffffffffffffffffffffffff161480610edb5750610eda81610ed56127cd565b612206565b5b610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190614f51565b60405180910390fd5b610f248383612841565b505050565b600080610f8f610f897f0824ba0e012705adec60b593e76a70b3db1e906d8666c54be5c764b993b68a1b610f5b6127cd565b87604051602001610f6e93929190614c80565b604051602081830303815290604052805190602001206128fa565b84612914565b90508073ffffffffffffffffffffffffffffffffffffffff16610fb0611a70565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b6000600980549050905090565b601360009054906101000a900460ff1681565b611001610ffb6127cd565b8261293b565b611040576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611037906150f1565b60405180910390fd5b61104b838383612a19565b505050565b60011515601360019054906101000a900460ff161515146110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90614ed1565b60405180910390fd5b6110b08282610f29565b6110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e690615111565b60405180910390fd5b60008311801561115057508161114d84601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b11155b61118f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118690615151565b60405180910390fd5b6111a483600f54612c8b90919063ffffffff16565b3410156111e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dd906150b1565b60405180910390fd5b600d54611203846111f5610fd0565b612c7590919063ffffffff16565b1115611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90614f31565b60405180910390fd5b60005b8381101561128a576112656001601154612c7590919063ffffffff16565b60118190555061127733601154612ca1565b808061128290615504565b915050611247565b506112dd83601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061133583601054612c7590919063ffffffff16565b6010819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560338460115460405161137093929190614c0c565b60405180910390a1505050565b6000611388836116d4565b82106113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c090614df1565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61143d83838360405180602001604052806000815250611f40565b505050565b600e5481565b6000611452610fd0565b8210611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148a90615131565b60405180910390fd5b600982815481106114cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b60125481565b6114ed6127cd565b73ffffffffffffffffffffffffffffffffffffffff1661150b611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155890615031565b60405180910390fd5b6000601360006101000a81548160ff021916908315150217905550565b60105481565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162490614f91565b60405180910390fd5b80915050919050565b61163e6127cd565b73ffffffffffffffffffffffffffffffffffffffff1661165c611a70565b73ffffffffffffffffffffffffffffffffffffffff16146116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a990615031565b60405180910390fd5b80600f8190555050565b60166020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c90614f71565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117946127cd565b73ffffffffffffffffffffffffffffffffffffffff166117b2611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ff90615031565b60405180910390fd5b6118126000612cbf565b565b60156020528060005260406000206000915090505481565b60606000611839836116d4565b905060008114156118bc57600067ffffffffffffffff811115611885577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118b35781602001602082028036833780820191505090505b509150506119a3565b60008167ffffffffffffffff8111156118fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561192c5781602001602082028036833780820191505090505b50905060005b8281101561199c57611944858261137d565b82828151811061197d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061199490615504565b915050611932565b8193505050505b919050565b6119b06127cd565b73ffffffffffffffffffffffffffffffffffffffff166119ce611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1b90615031565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050611a6257600080fd5b565b600d5481565b600f5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60115481565b606060028054611aae906154a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611ada906154a1565b8015611b275780601f10611afc57610100808354040283529160200191611b27565b820191906000526020600020905b815481529060010190602001808311611b0a57829003601f168201915b5050505050905090565b611b396127cd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9e90614eb1565b60405180910390fd5b8060066000611bb46127cd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611c616127cd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ca69190614c65565b60405180910390a35050565b601360019054906101000a900460ff1681565b611ccd6127cd565b73ffffffffffffffffffffffffffffffffffffffff16611ceb611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3890615031565b60405180910390fd5b6001601360006101000a81548160ff021916908315150217905550565b60011515601360009054906101000a900460ff16151514611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90614db1565b60405180910390fd5b600081118015611dc5575060328111155b611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb90614d91565b60405180910390fd5b600d54611e2182611e13610fd0565b612c7590919063ffffffff16565b1115611e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5990615171565b60405180910390fd5b611e7781600f54612c8b90919063ffffffff16565b341015611eb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb0906150b1565b60405180910390fd5b60005b81811015611eff57611eda6001601154612c7590919063ffffffff16565b601181905550611eec33601154612ca1565b8080611ef790615504565b915050611ebc565b507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603382601154604051611f3593929190614c0c565b60405180910390a150565b611f51611f4b6127cd565b8361293b565b611f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f87906150f1565b60405180910390fd5b611f9c84848484612d83565b50505050565b6060611fad826127d5565b611fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe390614fb1565b60405180910390fd5b6014611ff783612ddf565b604051602001612008929190614b4a565b6040516020818303038152906040529050919050565b6120266127cd565b73ffffffffffffffffffffffffffffffffffffffff16612044611a70565b73ffffffffffffffffffffffffffffffffffffffff161461209a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209190615031565b60405180910390fd5b600d546120b7826120a9610fd0565b612c7590919063ffffffff16565b11156120f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ef906150d1565b60405180910390fd5b60005b8181101561213e576121196001601154612c7590919063ffffffff16565b60118190555061212b83601154612ca1565b808061213690615504565b9150506120fb565b507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560828260115460405161217493929190614c0c565b60405180910390a15050565b6121886127cd565b73ffffffffffffffffffffffffffffffffffffffff166121a6611a70565b73ffffffffffffffffffffffffffffffffffffffff16146121fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f390615031565b60405180910390fd5b80600e8190555050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6122a26127cd565b73ffffffffffffffffffffffffffffffffffffffff166122c0611a70565b73ffffffffffffffffffffffffffffffffffffffff1614612316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230d90615031565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237d90614e31565b60405180910390fd5b61238f81612cbf565b50565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638462151c336040518263ffffffff1660e01b81526004016123ef9190614ba5565b60006040518083038186803b15801561240757600080fd5b505afa15801561241b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061244491906142df565b905060011515601360019054906101000a900460ff1615151461249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390614e71565b60405180910390fd5b6000821180156124fe575080516124fb83601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b11155b61253d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253490615071565b60405180910390fd5b60005b828110156126a95761259b6001601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061267a33836126366001601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b8151811061266d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612ca1565b6126906001601254612c7590919063ffffffff16565b60128190555080806126a190615504565b915050612540565b507f983bf7148e3e9ebde769e6a1d5b19b34b9c318555cfb03836448a9376bd68d4533836012546040516126df93929190614c0c565b60405180910390a15050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806127c657506127c582612fa2565b5b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166128b483611584565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061290d61290761300c565b836130cf565b9050919050565b60008060006129238585613102565b9150915061293081613185565b819250505092915050565b6000612946826127d5565b612985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297c90614f11565b60405180910390fd5b600061299083611584565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806129ff57508373ffffffffffffffffffffffffffffffffffffffff166129e784610d8c565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a105750612a0f8185612206565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a3982611584565b73ffffffffffffffffffffffffffffffffffffffff1614612a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8690615051565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612aff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af690614e91565b60405180910390fd5b612b0a8383836134d6565b612b15600082612841565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b6591906153a0565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bbc91906152bf565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008183612c8391906152bf565b905092915050565b60008183612c999190615346565b905092915050565b612cbb8282604051806020016040528060008152506135ea565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612d8e848484612a19565b612d9a84848484613645565b612dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd090614e11565b60405180910390fd5b50505050565b60606000821415612e27576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f87565b600082905060005b60008214612e59578080612e4290615504565b915050600a82612e529190615315565b9150612e2f565b60008167ffffffffffffffff811115612e9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ecd5781602001600182028036833780820191505090505b5090505b60008514612f8057600182612ee691906153a0565b9150600a85612ef59190615557565b6030612f0191906152bf565b60f81b818381518110612f3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612f799190615315565b9450612ed1565b8093505050505b919050565b60008183612f9a91906153a0565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561305e577f000000000000000000000000000000000000000000000000000000000000000090506130cc565b6130c97f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006137dc565b90505b90565b600082826040516020016130e4929190614b6e565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156131445760008060006020860151925060408601519150606086015160001a905061313887828585613816565b9450945050505061317e565b60408351141561317557600080602085015191506040850151905061316a868383613923565b93509350505061317e565b60006002915091505b9250929050565b600060048111156131bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156131f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613203576134d3565b6001600481111561323d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613276577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156132b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ae90614d71565b60405180910390fd5b600260048111156132f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561332a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561336b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336290614dd1565b60405180910390fd5b600360048111156133a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561341f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341690614ef1565b60405180910390fd5b600480811115613458577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613491577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156134d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134c990614fd1565b60405180910390fd5b5b50565b6134e1838383613971565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135245761351f81613976565b613563565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146135625761356183826139bf565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156135a6576135a181613b2c565b6135e5565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146135e4576135e38282613c6f565b5b5b505050565b6135f48383613cee565b6136016000848484613645565b613640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363790614e11565b60405180910390fd5b505050565b60006136668473ffffffffffffffffffffffffffffffffffffffff16613ebc565b156137cf578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261368f6127cd565b8786866040518563ffffffff1660e01b81526004016136b19493929190614bc0565b602060405180830381600087803b1580156136cb57600080fd5b505af19250505080156136fc57506040513d601f19601f820116820180604052508101906136f99190614349565b60015b61377f573d806000811461372c576040519150601f19603f3d011682016040523d82523d6000602084013e613731565b606091505b50600081511415613777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161376e90614e11565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506137d4565b600190505b949350505050565b600083838346306040516020016137f7959493929190614cb7565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561385157600060039150915061391a565b601b8560ff16141580156138695750601c8560ff1614155b1561387b57600060049150915061391a565b6000600187878787604051600081526020016040526040516138a09493929190614d0a565b6020604051602081039080840390855afa1580156138c2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156139115760006001925092505061391a565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061396387828885613816565b935093505050935093915050565b505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016139cc846116d4565b6139d691906153a0565b9050600060086000848152602001908152602001600020549050818114613abb576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600980549050613b4091906153a0565b90506000600a6000848152602001908152602001600020549050600060098381548110613b96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060098381548110613bde577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a6000858152602001908152602001600020600090556009805480613c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613c7a836116d4565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d5590614ff1565b60405180910390fd5b613d67816127d5565b15613da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d9e90614e51565b60405180910390fd5b613db3600083836134d6565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613e0391906152bf565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054613edb906154a1565b90600052602060002090601f016020900481019282613efd5760008555613f44565b82601f10613f1657803560ff1916838001178555613f44565b82800160010185558215613f44579182015b82811115613f43578235825591602001919060010190613f28565b5b509050613f519190613f55565b5090565b5b80821115613f6e576000816000905550600101613f56565b5090565b6000613f85613f80846151d1565b6151ac565b90508083825260208201905082856020860282011115613fa457600080fd5b60005b85811015613fd45781613fba8882614123565b845260208401935060208301925050600181019050613fa7565b5050509392505050565b6000613ff1613fec846151fd565b6151ac565b90508281526020810184848401111561400957600080fd5b61401484828561545f565b509392505050565b60008135905061402b81615e73565b92915050565b600082601f83011261404257600080fd5b8151614052848260208601613f72565b91505092915050565b60008135905061406a81615e8a565b92915050565b60008135905061407f81615ea1565b92915050565b60008151905061409481615ea1565b92915050565b600082601f8301126140ab57600080fd5b81356140bb848260208601613fde565b91505092915050565b60008083601f8401126140d657600080fd5b8235905067ffffffffffffffff8111156140ef57600080fd5b60208301915083600182028301111561410757600080fd5b9250929050565b60008135905061411d81615eb8565b92915050565b60008151905061413281615eb8565b92915050565b60006020828403121561414a57600080fd5b60006141588482850161401c565b91505092915050565b6000806040838503121561417457600080fd5b60006141828582860161401c565b92505060206141938582860161401c565b9150509250929050565b6000806000606084860312156141b257600080fd5b60006141c08682870161401c565b93505060206141d18682870161401c565b92505060406141e28682870161410e565b9150509250925092565b6000806000806080858703121561420257600080fd5b60006142108782880161401c565b94505060206142218782880161401c565b93505060406142328782880161410e565b925050606085013567ffffffffffffffff81111561424f57600080fd5b61425b8782880161409a565b91505092959194509250565b6000806040838503121561427a57600080fd5b60006142888582860161401c565b92505060206142998582860161405b565b9150509250929050565b600080604083850312156142b657600080fd5b60006142c48582860161401c565b92505060206142d58582860161410e565b9150509250929050565b6000602082840312156142f157600080fd5b600082015167ffffffffffffffff81111561430b57600080fd5b61431784828501614031565b91505092915050565b60006020828403121561433257600080fd5b600061434084828501614070565b91505092915050565b60006020828403121561435b57600080fd5b600061436984828501614085565b91505092915050565b6000806020838503121561438557600080fd5b600083013567ffffffffffffffff81111561439f57600080fd5b6143ab858286016140c4565b92509250509250929050565b6000602082840312156143c957600080fd5b60006143d78482850161410e565b91505092915050565b600080604083850312156143f357600080fd5b60006144018582860161410e565b925050602083013567ffffffffffffffff81111561441e57600080fd5b61442a8582860161409a565b9150509250929050565b60008060006060848603121561444957600080fd5b60006144578682870161410e565b93505060206144688682870161410e565b925050604084013567ffffffffffffffff81111561448557600080fd5b6144918682870161409a565b9150509250925092565b60006144a78383614b1d565b60208301905092915050565b6144bc816153d4565b82525050565b60006144cd82615253565b6144d78185615281565b93506144e28361522e565b8060005b838110156145135781516144fa888261449b565b975061450583615274565b9250506001810190506144e6565b5085935050505092915050565b614529816153e6565b82525050565b614538816153f2565b82525050565b61454f61454a826153f2565b61554d565b82525050565b60006145608261525e565b61456a8185615292565b935061457a81856020860161546e565b61458381615644565b840191505092915050565b600061459982615269565b6145a381856152a3565b93506145b381856020860161546e565b6145bc81615644565b840191505092915050565b60006145d282615269565b6145dc81856152b4565b93506145ec81856020860161546e565b80840191505092915050565b60008154614605816154a1565b61460f81866152b4565b9450600182166000811461462a576001811461463b5761466e565b60ff1983168652818601935061466e565b6146448561523e565b60005b8381101561466657815481890152600182019150602081019050614647565b838801955050505b50505092915050565b60006146846018836152a3565b915061468f82615655565b602082019050919050565b60006146a7602c836152a3565b91506146b28261567e565b604082019050919050565b60006146ca6014836152a3565b91506146d5826156cd565b602082019050919050565b60006146ed601f836152a3565b91506146f8826156f6565b602082019050919050565b6000614710602b836152a3565b915061471b8261571f565b604082019050919050565b60006147336032836152a3565b915061473e8261576e565b604082019050919050565b60006147566026836152a3565b9150614761826157bd565b604082019050919050565b6000614779601c836152a3565b91506147848261580c565b602082019050919050565b600061479c6002836152b4565b91506147a782615835565b600282019050919050565b60006147bf6016836152a3565b91506147ca8261585e565b602082019050919050565b60006147e26024836152a3565b91506147ed82615887565b604082019050919050565b60006148056019836152a3565b9150614810826158d6565b602082019050919050565b60006148286017836152a3565b9150614833826158ff565b602082019050919050565b600061484b6022836152a3565b915061485682615928565b604082019050919050565b600061486e602c836152a3565b915061487982615977565b604082019050919050565b60006148916018836152a3565b915061489c826159c6565b602082019050919050565b60006148b46038836152a3565b91506148bf826159ef565b604082019050919050565b60006148d7602a836152a3565b91506148e282615a3e565b604082019050919050565b60006148fa6029836152a3565b915061490582615a8d565b604082019050919050565b600061491d6010836152a3565b915061492882615adc565b602082019050919050565b60006149406022836152a3565b915061494b82615b05565b604082019050919050565b60006149636020836152a3565b915061496e82615b54565b602082019050919050565b6000614986602c836152a3565b915061499182615b7d565b604082019050919050565b60006149a96020836152a3565b91506149b482615bcc565b602082019050919050565b60006149cc6029836152a3565b91506149d782615bf5565b604082019050919050565b60006149ef6027836152a3565b91506149fa82615c44565b604082019050919050565b6000614a126021836152a3565b9150614a1d82615c93565b604082019050919050565b6000614a356024836152a3565b9150614a4082615ce2565b604082019050919050565b6000614a586014836152a3565b9150614a6382615d31565b602082019050919050565b6000614a7b6031836152a3565b9150614a8682615d5a565b604082019050919050565b6000614a9e6019836152a3565b9150614aa982615da9565b602082019050919050565b6000614ac1602c836152a3565b9150614acc82615dd2565b604082019050919050565b6000614ae4601b836152a3565b9150614aef82615e21565b602082019050919050565b6000614b076009836152a3565b9150614b1282615e4a565b602082019050919050565b614b2681615448565b82525050565b614b3581615448565b82525050565b614b4481615452565b82525050565b6000614b5682856145f8565b9150614b6282846145c7565b91508190509392505050565b6000614b798261478f565b9150614b85828561453e565b602082019150614b95828461453e565b6020820191508190509392505050565b6000602082019050614bba60008301846144b3565b92915050565b6000608082019050614bd560008301876144b3565b614be260208301866144b3565b614bef6040830185614b2c565b8181036060830152614c018184614555565b905095945050505050565b6000606082019050614c2160008301866144b3565b614c2e6020830185614b2c565b614c3b6040830184614b2c565b949350505050565b60006020820190508181036000830152614c5d81846144c2565b905092915050565b6000602082019050614c7a6000830184614520565b92915050565b6000606082019050614c95600083018661452f565b614ca260208301856144b3565b614caf6040830184614b2c565b949350505050565b600060a082019050614ccc600083018861452f565b614cd9602083018761452f565b614ce6604083018661452f565b614cf36060830185614b2c565b614d0060808301846144b3565b9695505050505050565b6000608082019050614d1f600083018761452f565b614d2c6020830186614b3b565b614d39604083018561452f565b614d46606083018461452f565b95945050505050565b60006020820190508181036000830152614d69818461458e565b905092915050565b60006020820190508181036000830152614d8a81614677565b9050919050565b60006020820190508181036000830152614daa8161469a565b9050919050565b60006020820190508181036000830152614dca816146bd565b9050919050565b60006020820190508181036000830152614dea816146e0565b9050919050565b60006020820190508181036000830152614e0a81614703565b9050919050565b60006020820190508181036000830152614e2a81614726565b9050919050565b60006020820190508181036000830152614e4a81614749565b9050919050565b60006020820190508181036000830152614e6a8161476c565b9050919050565b60006020820190508181036000830152614e8a816147b2565b9050919050565b60006020820190508181036000830152614eaa816147d5565b9050919050565b60006020820190508181036000830152614eca816147f8565b9050919050565b60006020820190508181036000830152614eea8161481b565b9050919050565b60006020820190508181036000830152614f0a8161483e565b9050919050565b60006020820190508181036000830152614f2a81614861565b9050919050565b60006020820190508181036000830152614f4a81614884565b9050919050565b60006020820190508181036000830152614f6a816148a7565b9050919050565b60006020820190508181036000830152614f8a816148ca565b9050919050565b60006020820190508181036000830152614faa816148ed565b9050919050565b60006020820190508181036000830152614fca81614910565b9050919050565b60006020820190508181036000830152614fea81614933565b9050919050565b6000602082019050818103600083015261500a81614956565b9050919050565b6000602082019050818103600083015261502a81614979565b9050919050565b6000602082019050818103600083015261504a8161499c565b9050919050565b6000602082019050818103600083015261506a816149bf565b9050919050565b6000602082019050818103600083015261508a816149e2565b9050919050565b600060208201905081810360008301526150aa81614a05565b9050919050565b600060208201905081810360008301526150ca81614a28565b9050919050565b600060208201905081810360008301526150ea81614a4b565b9050919050565b6000602082019050818103600083015261510a81614a6e565b9050919050565b6000602082019050818103600083015261512a81614a91565b9050919050565b6000602082019050818103600083015261514a81614ab4565b9050919050565b6000602082019050818103600083015261516a81614ad7565b9050919050565b6000602082019050818103600083015261518a81614afa565b9050919050565b60006020820190506151a66000830184614b2c565b92915050565b60006151b66151c7565b90506151c282826154d3565b919050565b6000604051905090565b600067ffffffffffffffff8211156151ec576151eb615615565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561521857615217615615565b5b61522182615644565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006152ca82615448565b91506152d583615448565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561530a57615309615588565b5b828201905092915050565b600061532082615448565b915061532b83615448565b92508261533b5761533a6155b7565b5b828204905092915050565b600061535182615448565b915061535c83615448565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561539557615394615588565b5b828202905092915050565b60006153ab82615448565b91506153b683615448565b9250828210156153c9576153c8615588565b5b828203905092915050565b60006153df82615428565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561548c578082015181840152602081019050615471565b8381111561549b576000848401525b50505050565b600060028204905060018216806154b957607f821691505b602082108114156154cd576154cc6155e6565b5b50919050565b6154dc82615644565b810181811067ffffffffffffffff821117156154fb576154fa615615565b5b80604052505050565b600061550f82615448565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561554257615541615588565b5b600182019050919050565b6000819050919050565b600061556282615448565b915061556d83615448565b92508261557d5761557c6155b7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f596f752063616e206d696e74206d696e696d756d20312c206d6178696d756d2060008201527f35302073616d75726169732e0000000000000000000000000000000000000000602082015250565b7f53616c65206861736e277420737461727465642e000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f436c61696d65206861736e277420737461727465642e00000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f50726573616c65206861736e277420737461727465642e000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4578636565647320746865204d41585f53414d555241492e0000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f544f4b454e5f4e4f545f45584953545300000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f45786365656420746865207175616e7469747920746861742063616e2062652060008201527f636c61696d656400000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f45746865722076616c75652073656e742069732062656c6f772074686520707260008201527f6963652e00000000000000000000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f53414d555241492e000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f7420656c696769626c6520666f722070726573616c652e00000000000000600082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f45786365656473206d61782070726573616c65206e756d6265722e0000000000600082015250565b7f536f6c64206f7574210000000000000000000000000000000000000000000000600082015250565b615e7c816153d4565b8114615e8757600080fd5b50565b615e93816153e6565b8114615e9e57600080fd5b50565b615eaa816153fc565b8114615eb557600080fd5b50565b615ec181615448565b8114615ecc57600080fd5b5056fea2646970667358221220cc9474d8f052385a210224428223fb6856444457f45b468d7c5d5ae7a7992e8d64736f6c63430008040033687474703a2f2f6170692e6b6174616e616e73616d757261692e6172742f4d657461646174612f",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c80636456c2051161014f57806395d89b41116100c1578063c87b56dd1161007a578063c87b56dd14610905578063de9af03814610942578063e136fe731461096b578063e985e9c514610994578063f2fde38b146109d1578063f69b66ef146109fa57610272565b806395d89b411461082a578063a22cb46514610855578063b02200151461087e578063b66a0e5d146108a9578063b6791cfa146108c0578063b88d4fde146108dc57610272565b80638462151c116101135780638462151c14610737578063853828b614610774578063872b25b01461077e5780638d859f3e146107a95780638da5cb5b146107d45780638e499bcf146107ff57610272565b80636456c2051461064057806369cff3471461066957806370a08231146106a6578063715018a6146106e357806373b2e80e146106fa57610272565b80631c8b232d116101e85780634d4c4e99116101ac5780634d4c4e991461052e5780634f6ccce714610559578063544657731461059657806355367ba9146105c15780635edbad0a146105d85780636352211e1461060357610272565b80631c8b232d1461045857806323b872dd146104835780632bf831f0146104ac5780632f745c59146104c857806342842e0e1461050557610272565b806306fdde031161023a57806306fdde0314610348578063070f5c0914610373578063081812fc1461038a578063095ea7b3146103c757806317376bfa146103f057806318160ddd1461042d57610272565b806301ffc9a71461027757806302fe5305146102b457806304c98b2b146102dd57806304f60205146102f4578063063315921461031f575b600080fd5b34801561028357600080fd5b5061029e60048036038101906102999190614320565b610a23565b6040516102ab9190614c65565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190614372565b610a9d565b005b3480156102e957600080fd5b506102f2610b2f565b005b34801561030057600080fd5b50610309610bc8565b6040516103169190614c65565b60405180910390f35b34801561032b57600080fd5b50610346600480360381019061034191906143b7565b610bdb565b005b34801561035457600080fd5b5061035d610c61565b60405161036a9190614d4f565b60405180910390f35b34801561037f57600080fd5b50610388610cf3565b005b34801561039657600080fd5b506103b160048036038101906103ac91906143b7565b610d8c565b6040516103be9190614ba5565b60405180910390f35b3480156103d357600080fd5b506103ee60048036038101906103e991906142a3565b610e11565b005b3480156103fc57600080fd5b50610417600480360381019061041291906143e0565b610f29565b6040516104249190614c65565b60405180910390f35b34801561043957600080fd5b50610442610fd0565b60405161044f9190615191565b60405180910390f35b34801561046457600080fd5b5061046d610fdd565b60405161047a9190614c65565b60405180910390f35b34801561048f57600080fd5b506104aa60048036038101906104a5919061419d565b610ff0565b005b6104c660048036038101906104c19190614434565b611050565b005b3480156104d457600080fd5b506104ef60048036038101906104ea91906142a3565b61137d565b6040516104fc9190615191565b60405180910390f35b34801561051157600080fd5b5061052c6004803603810190610527919061419d565b611422565b005b34801561053a57600080fd5b50610543611442565b6040516105509190615191565b60405180910390f35b34801561056557600080fd5b50610580600480360381019061057b91906143b7565b611448565b60405161058d9190615191565b60405180910390f35b3480156105a257600080fd5b506105ab6114df565b6040516105b89190615191565b60405180910390f35b3480156105cd57600080fd5b506105d66114e5565b005b3480156105e457600080fd5b506105ed61157e565b6040516105fa9190615191565b60405180910390f35b34801561060f57600080fd5b5061062a600480360381019061062591906143b7565b611584565b6040516106379190614ba5565b60405180910390f35b34801561064c57600080fd5b50610667600480360381019061066291906143b7565b611636565b005b34801561067557600080fd5b50610690600480360381019061068b9190614138565b6116bc565b60405161069d9190615191565b60405180910390f35b3480156106b257600080fd5b506106cd60048036038101906106c89190614138565b6116d4565b6040516106da9190615191565b60405180910390f35b3480156106ef57600080fd5b506106f861178c565b005b34801561070657600080fd5b50610721600480360381019061071c9190614138565b611814565b60405161072e9190615191565b60405180910390f35b34801561074357600080fd5b5061075e60048036038101906107599190614138565b61182c565b60405161076b9190614c43565b60405180910390f35b61077c6119a8565b005b34801561078a57600080fd5b50610793611a64565b6040516107a09190615191565b60405180910390f35b3480156107b557600080fd5b506107be611a6a565b6040516107cb9190615191565b60405180910390f35b3480156107e057600080fd5b506107e9611a70565b6040516107f69190614ba5565b60405180910390f35b34801561080b57600080fd5b50610814611a99565b6040516108219190615191565b60405180910390f35b34801561083657600080fd5b5061083f611a9f565b60405161084c9190614d4f565b60405180910390f35b34801561086157600080fd5b5061087c60048036038101906108779190614267565b611b31565b005b34801561088a57600080fd5b50610893611cb2565b6040516108a09190614c65565b60405180910390f35b3480156108b557600080fd5b506108be611cc5565b005b6108da60048036038101906108d591906143b7565b611d5e565b005b3480156108e857600080fd5b5061090360048036038101906108fe91906141ec565b611f40565b005b34801561091157600080fd5b5061092c600480360381019061092791906143b7565b611fa2565b6040516109399190614d4f565b60405180910390f35b34801561094e57600080fd5b50610969600480360381019061096491906142a3565b61201e565b005b34801561097757600080fd5b50610992600480360381019061098d91906143b7565b612180565b005b3480156109a057600080fd5b506109bb60048036038101906109b69190614161565b612206565b6040516109c89190614c65565b60405180910390f35b3480156109dd57600080fd5b506109f860048036038101906109f39190614138565b61229a565b005b348015610a0657600080fd5b50610a216004803603810190610a1c91906143b7565b612392565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a965750610a95826126eb565b5b9050919050565b610aa56127cd565b73ffffffffffffffffffffffffffffffffffffffff16610ac3611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1090615031565b60405180910390fd5b818160149190610b2a929190613ecf565b505050565b610b376127cd565b73ffffffffffffffffffffffffffffffffffffffff16610b55611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba290615031565b60405180910390fd5b6001601360016101000a81548160ff021916908315150217905550565b601360029054906101000a900460ff1681565b610be36127cd565b73ffffffffffffffffffffffffffffffffffffffff16610c01611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e90615031565b60405180910390fd5b80600d8190555050565b606060018054610c70906154a1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9c906154a1565b8015610ce95780601f10610cbe57610100808354040283529160200191610ce9565b820191906000526020600020905b815481529060010190602001808311610ccc57829003601f168201915b5050505050905090565b610cfb6127cd565b73ffffffffffffffffffffffffffffffffffffffff16610d19611a70565b73ffffffffffffffffffffffffffffffffffffffff1614610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6690615031565b60405180910390fd5b6000601360016101000a81548160ff021916908315150217905550565b6000610d97826127d5565b610dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcd90615011565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610e1c82611584565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490615091565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610eac6127cd565b73ffffffffffffffffffffffffffffffffffffffff161480610edb5750610eda81610ed56127cd565b612206565b5b610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190614f51565b60405180910390fd5b610f248383612841565b505050565b600080610f8f610f897f0824ba0e012705adec60b593e76a70b3db1e906d8666c54be5c764b993b68a1b610f5b6127cd565b87604051602001610f6e93929190614c80565b604051602081830303815290604052805190602001206128fa565b84612914565b90508073ffffffffffffffffffffffffffffffffffffffff16610fb0611a70565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b6000600980549050905090565b601360009054906101000a900460ff1681565b611001610ffb6127cd565b8261293b565b611040576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611037906150f1565b60405180910390fd5b61104b838383612a19565b505050565b60011515601360019054906101000a900460ff161515146110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90614ed1565b60405180910390fd5b6110b08282610f29565b6110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e690615111565b60405180910390fd5b60008311801561115057508161114d84601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b11155b61118f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118690615151565b60405180910390fd5b6111a483600f54612c8b90919063ffffffff16565b3410156111e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dd906150b1565b60405180910390fd5b600d54611203846111f5610fd0565b612c7590919063ffffffff16565b1115611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90614f31565b60405180910390fd5b60005b8381101561128a576112656001601154612c7590919063ffffffff16565b60118190555061127733601154612ca1565b808061128290615504565b915050611247565b506112dd83601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061133583601054612c7590919063ffffffff16565b6010819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560338460115460405161137093929190614c0c565b60405180910390a1505050565b6000611388836116d4565b82106113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c090614df1565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61143d83838360405180602001604052806000815250611f40565b505050565b600e5481565b6000611452610fd0565b8210611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148a90615131565b60405180910390fd5b600982815481106114cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b60125481565b6114ed6127cd565b73ffffffffffffffffffffffffffffffffffffffff1661150b611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155890615031565b60405180910390fd5b6000601360006101000a81548160ff021916908315150217905550565b60105481565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162490614f91565b60405180910390fd5b80915050919050565b61163e6127cd565b73ffffffffffffffffffffffffffffffffffffffff1661165c611a70565b73ffffffffffffffffffffffffffffffffffffffff16146116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a990615031565b60405180910390fd5b80600f8190555050565b60166020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c90614f71565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117946127cd565b73ffffffffffffffffffffffffffffffffffffffff166117b2611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ff90615031565b60405180910390fd5b6118126000612cbf565b565b60156020528060005260406000206000915090505481565b60606000611839836116d4565b905060008114156118bc57600067ffffffffffffffff811115611885577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118b35781602001602082028036833780820191505090505b509150506119a3565b60008167ffffffffffffffff8111156118fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561192c5781602001602082028036833780820191505090505b50905060005b8281101561199c57611944858261137d565b82828151811061197d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061199490615504565b915050611932565b8193505050505b919050565b6119b06127cd565b73ffffffffffffffffffffffffffffffffffffffff166119ce611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1b90615031565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050611a6257600080fd5b565b600d5481565b600f5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60115481565b606060028054611aae906154a1565b80601f0160208091040260200160405190810160405280929190818152602001828054611ada906154a1565b8015611b275780601f10611afc57610100808354040283529160200191611b27565b820191906000526020600020905b815481529060010190602001808311611b0a57829003601f168201915b5050505050905090565b611b396127cd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9e90614eb1565b60405180910390fd5b8060066000611bb46127cd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611c616127cd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ca69190614c65565b60405180910390a35050565b601360019054906101000a900460ff1681565b611ccd6127cd565b73ffffffffffffffffffffffffffffffffffffffff16611ceb611a70565b73ffffffffffffffffffffffffffffffffffffffff1614611d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3890615031565b60405180910390fd5b6001601360006101000a81548160ff021916908315150217905550565b60011515601360009054906101000a900460ff16151514611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90614db1565b60405180910390fd5b600081118015611dc5575060328111155b611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb90614d91565b60405180910390fd5b600d54611e2182611e13610fd0565b612c7590919063ffffffff16565b1115611e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5990615171565b60405180910390fd5b611e7781600f54612c8b90919063ffffffff16565b341015611eb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb0906150b1565b60405180910390fd5b60005b81811015611eff57611eda6001601154612c7590919063ffffffff16565b601181905550611eec33601154612ca1565b8080611ef790615504565b915050611ebc565b507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603382601154604051611f3593929190614c0c565b60405180910390a150565b611f51611f4b6127cd565b8361293b565b611f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f87906150f1565b60405180910390fd5b611f9c84848484612d83565b50505050565b6060611fad826127d5565b611fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe390614fb1565b60405180910390fd5b6014611ff783612ddf565b604051602001612008929190614b4a565b6040516020818303038152906040529050919050565b6120266127cd565b73ffffffffffffffffffffffffffffffffffffffff16612044611a70565b73ffffffffffffffffffffffffffffffffffffffff161461209a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209190615031565b60405180910390fd5b600d546120b7826120a9610fd0565b612c7590919063ffffffff16565b11156120f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ef906150d1565b60405180910390fd5b60005b8181101561213e576121196001601154612c7590919063ffffffff16565b60118190555061212b83601154612ca1565b808061213690615504565b9150506120fb565b507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560828260115460405161217493929190614c0c565b60405180910390a15050565b6121886127cd565b73ffffffffffffffffffffffffffffffffffffffff166121a6611a70565b73ffffffffffffffffffffffffffffffffffffffff16146121fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f390615031565b60405180910390fd5b80600e8190555050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6122a26127cd565b73ffffffffffffffffffffffffffffffffffffffff166122c0611a70565b73ffffffffffffffffffffffffffffffffffffffff1614612316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230d90615031565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237d90614e31565b60405180910390fd5b61238f81612cbf565b50565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638462151c336040518263ffffffff1660e01b81526004016123ef9190614ba5565b60006040518083038186803b15801561240757600080fd5b505afa15801561241b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061244491906142df565b905060011515601360019054906101000a900460ff1615151461249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390614e71565b60405180910390fd5b6000821180156124fe575080516124fb83601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b11155b61253d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253490615071565b60405180910390fd5b60005b828110156126a95761259b6001601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c7590919063ffffffff16565b601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061267a33836126366001601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f8c90919063ffffffff16565b8151811061266d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612ca1565b6126906001601254612c7590919063ffffffff16565b60128190555080806126a190615504565b915050612540565b507f983bf7148e3e9ebde769e6a1d5b19b34b9c318555cfb03836448a9376bd68d4533836012546040516126df93929190614c0c565b60405180910390a15050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806127c657506127c582612fa2565b5b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166128b483611584565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061290d61290761300c565b836130cf565b9050919050565b60008060006129238585613102565b9150915061293081613185565b819250505092915050565b6000612946826127d5565b612985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297c90614f11565b60405180910390fd5b600061299083611584565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806129ff57508373ffffffffffffffffffffffffffffffffffffffff166129e784610d8c565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a105750612a0f8185612206565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a3982611584565b73ffffffffffffffffffffffffffffffffffffffff1614612a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8690615051565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612aff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af690614e91565b60405180910390fd5b612b0a8383836134d6565b612b15600082612841565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b6591906153a0565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bbc91906152bf565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008183612c8391906152bf565b905092915050565b60008183612c999190615346565b905092915050565b612cbb8282604051806020016040528060008152506135ea565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612d8e848484612a19565b612d9a84848484613645565b612dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd090614e11565b60405180910390fd5b50505050565b60606000821415612e27576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f87565b600082905060005b60008214612e59578080612e4290615504565b915050600a82612e529190615315565b9150612e2f565b60008167ffffffffffffffff811115612e9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ecd5781602001600182028036833780820191505090505b5090505b60008514612f8057600182612ee691906153a0565b9150600a85612ef59190615557565b6030612f0191906152bf565b60f81b818381518110612f3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612f799190615315565b9450612ed1565b8093505050505b919050565b60008183612f9a91906153a0565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561305e577f000000000000000000000000000000000000000000000000000000000000000090506130cc565b6130c97f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006137dc565b90505b90565b600082826040516020016130e4929190614b6e565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156131445760008060006020860151925060408601519150606086015160001a905061313887828585613816565b9450945050505061317e565b60408351141561317557600080602085015191506040850151905061316a868383613923565b93509350505061317e565b60006002915091505b9250929050565b600060048111156131bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156131f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613203576134d3565b6001600481111561323d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613276577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156132b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ae90614d71565b60405180910390fd5b600260048111156132f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561332a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561336b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336290614dd1565b60405180910390fd5b600360048111156133a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561341f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341690614ef1565b60405180910390fd5b600480811115613458577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613491577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156134d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134c990614fd1565b60405180910390fd5b5b50565b6134e1838383613971565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135245761351f81613976565b613563565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146135625761356183826139bf565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156135a6576135a181613b2c565b6135e5565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146135e4576135e38282613c6f565b5b5b505050565b6135f48383613cee565b6136016000848484613645565b613640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363790614e11565b60405180910390fd5b505050565b60006136668473ffffffffffffffffffffffffffffffffffffffff16613ebc565b156137cf578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261368f6127cd565b8786866040518563ffffffff1660e01b81526004016136b19493929190614bc0565b602060405180830381600087803b1580156136cb57600080fd5b505af19250505080156136fc57506040513d601f19601f820116820180604052508101906136f99190614349565b60015b61377f573d806000811461372c576040519150601f19603f3d011682016040523d82523d6000602084013e613731565b606091505b50600081511415613777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161376e90614e11565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506137d4565b600190505b949350505050565b600083838346306040516020016137f7959493929190614cb7565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561385157600060039150915061391a565b601b8560ff16141580156138695750601c8560ff1614155b1561387b57600060049150915061391a565b6000600187878787604051600081526020016040526040516138a09493929190614d0a565b6020604051602081039080840390855afa1580156138c2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156139115760006001925092505061391a565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061396387828885613816565b935093505050935093915050565b505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016139cc846116d4565b6139d691906153a0565b9050600060086000848152602001908152602001600020549050818114613abb576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600980549050613b4091906153a0565b90506000600a6000848152602001908152602001600020549050600060098381548110613b96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060098381548110613bde577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a6000858152602001908152602001600020600090556009805480613c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613c7a836116d4565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d5590614ff1565b60405180910390fd5b613d67816127d5565b15613da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d9e90614e51565b60405180910390fd5b613db3600083836134d6565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613e0391906152bf565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054613edb906154a1565b90600052602060002090601f016020900481019282613efd5760008555613f44565b82601f10613f1657803560ff1916838001178555613f44565b82800160010185558215613f44579182015b82811115613f43578235825591602001919060010190613f28565b5b509050613f519190613f55565b5090565b5b80821115613f6e576000816000905550600101613f56565b5090565b6000613f85613f80846151d1565b6151ac565b90508083825260208201905082856020860282011115613fa457600080fd5b60005b85811015613fd45781613fba8882614123565b845260208401935060208301925050600181019050613fa7565b5050509392505050565b6000613ff1613fec846151fd565b6151ac565b90508281526020810184848401111561400957600080fd5b61401484828561545f565b509392505050565b60008135905061402b81615e73565b92915050565b600082601f83011261404257600080fd5b8151614052848260208601613f72565b91505092915050565b60008135905061406a81615e8a565b92915050565b60008135905061407f81615ea1565b92915050565b60008151905061409481615ea1565b92915050565b600082601f8301126140ab57600080fd5b81356140bb848260208601613fde565b91505092915050565b60008083601f8401126140d657600080fd5b8235905067ffffffffffffffff8111156140ef57600080fd5b60208301915083600182028301111561410757600080fd5b9250929050565b60008135905061411d81615eb8565b92915050565b60008151905061413281615eb8565b92915050565b60006020828403121561414a57600080fd5b60006141588482850161401c565b91505092915050565b6000806040838503121561417457600080fd5b60006141828582860161401c565b92505060206141938582860161401c565b9150509250929050565b6000806000606084860312156141b257600080fd5b60006141c08682870161401c565b93505060206141d18682870161401c565b92505060406141e28682870161410e565b9150509250925092565b6000806000806080858703121561420257600080fd5b60006142108782880161401c565b94505060206142218782880161401c565b93505060406142328782880161410e565b925050606085013567ffffffffffffffff81111561424f57600080fd5b61425b8782880161409a565b91505092959194509250565b6000806040838503121561427a57600080fd5b60006142888582860161401c565b92505060206142998582860161405b565b9150509250929050565b600080604083850312156142b657600080fd5b60006142c48582860161401c565b92505060206142d58582860161410e565b9150509250929050565b6000602082840312156142f157600080fd5b600082015167ffffffffffffffff81111561430b57600080fd5b61431784828501614031565b91505092915050565b60006020828403121561433257600080fd5b600061434084828501614070565b91505092915050565b60006020828403121561435b57600080fd5b600061436984828501614085565b91505092915050565b6000806020838503121561438557600080fd5b600083013567ffffffffffffffff81111561439f57600080fd5b6143ab858286016140c4565b92509250509250929050565b6000602082840312156143c957600080fd5b60006143d78482850161410e565b91505092915050565b600080604083850312156143f357600080fd5b60006144018582860161410e565b925050602083013567ffffffffffffffff81111561441e57600080fd5b61442a8582860161409a565b9150509250929050565b60008060006060848603121561444957600080fd5b60006144578682870161410e565b93505060206144688682870161410e565b925050604084013567ffffffffffffffff81111561448557600080fd5b6144918682870161409a565b9150509250925092565b60006144a78383614b1d565b60208301905092915050565b6144bc816153d4565b82525050565b60006144cd82615253565b6144d78185615281565b93506144e28361522e565b8060005b838110156145135781516144fa888261449b565b975061450583615274565b9250506001810190506144e6565b5085935050505092915050565b614529816153e6565b82525050565b614538816153f2565b82525050565b61454f61454a826153f2565b61554d565b82525050565b60006145608261525e565b61456a8185615292565b935061457a81856020860161546e565b61458381615644565b840191505092915050565b600061459982615269565b6145a381856152a3565b93506145b381856020860161546e565b6145bc81615644565b840191505092915050565b60006145d282615269565b6145dc81856152b4565b93506145ec81856020860161546e565b80840191505092915050565b60008154614605816154a1565b61460f81866152b4565b9450600182166000811461462a576001811461463b5761466e565b60ff1983168652818601935061466e565b6146448561523e565b60005b8381101561466657815481890152600182019150602081019050614647565b838801955050505b50505092915050565b60006146846018836152a3565b915061468f82615655565b602082019050919050565b60006146a7602c836152a3565b91506146b28261567e565b604082019050919050565b60006146ca6014836152a3565b91506146d5826156cd565b602082019050919050565b60006146ed601f836152a3565b91506146f8826156f6565b602082019050919050565b6000614710602b836152a3565b915061471b8261571f565b604082019050919050565b60006147336032836152a3565b915061473e8261576e565b604082019050919050565b60006147566026836152a3565b9150614761826157bd565b604082019050919050565b6000614779601c836152a3565b91506147848261580c565b602082019050919050565b600061479c6002836152b4565b91506147a782615835565b600282019050919050565b60006147bf6016836152a3565b91506147ca8261585e565b602082019050919050565b60006147e26024836152a3565b91506147ed82615887565b604082019050919050565b60006148056019836152a3565b9150614810826158d6565b602082019050919050565b60006148286017836152a3565b9150614833826158ff565b602082019050919050565b600061484b6022836152a3565b915061485682615928565b604082019050919050565b600061486e602c836152a3565b915061487982615977565b604082019050919050565b60006148916018836152a3565b915061489c826159c6565b602082019050919050565b60006148b46038836152a3565b91506148bf826159ef565b604082019050919050565b60006148d7602a836152a3565b91506148e282615a3e565b604082019050919050565b60006148fa6029836152a3565b915061490582615a8d565b604082019050919050565b600061491d6010836152a3565b915061492882615adc565b602082019050919050565b60006149406022836152a3565b915061494b82615b05565b604082019050919050565b60006149636020836152a3565b915061496e82615b54565b602082019050919050565b6000614986602c836152a3565b915061499182615b7d565b604082019050919050565b60006149a96020836152a3565b91506149b482615bcc565b602082019050919050565b60006149cc6029836152a3565b91506149d782615bf5565b604082019050919050565b60006149ef6027836152a3565b91506149fa82615c44565b604082019050919050565b6000614a126021836152a3565b9150614a1d82615c93565b604082019050919050565b6000614a356024836152a3565b9150614a4082615ce2565b604082019050919050565b6000614a586014836152a3565b9150614a6382615d31565b602082019050919050565b6000614a7b6031836152a3565b9150614a8682615d5a565b604082019050919050565b6000614a9e6019836152a3565b9150614aa982615da9565b602082019050919050565b6000614ac1602c836152a3565b9150614acc82615dd2565b604082019050919050565b6000614ae4601b836152a3565b9150614aef82615e21565b602082019050919050565b6000614b076009836152a3565b9150614b1282615e4a565b602082019050919050565b614b2681615448565b82525050565b614b3581615448565b82525050565b614b4481615452565b82525050565b6000614b5682856145f8565b9150614b6282846145c7565b91508190509392505050565b6000614b798261478f565b9150614b85828561453e565b602082019150614b95828461453e565b6020820191508190509392505050565b6000602082019050614bba60008301846144b3565b92915050565b6000608082019050614bd560008301876144b3565b614be260208301866144b3565b614bef6040830185614b2c565b8181036060830152614c018184614555565b905095945050505050565b6000606082019050614c2160008301866144b3565b614c2e6020830185614b2c565b614c3b6040830184614b2c565b949350505050565b60006020820190508181036000830152614c5d81846144c2565b905092915050565b6000602082019050614c7a6000830184614520565b92915050565b6000606082019050614c95600083018661452f565b614ca260208301856144b3565b614caf6040830184614b2c565b949350505050565b600060a082019050614ccc600083018861452f565b614cd9602083018761452f565b614ce6604083018661452f565b614cf36060830185614b2c565b614d0060808301846144b3565b9695505050505050565b6000608082019050614d1f600083018761452f565b614d2c6020830186614b3b565b614d39604083018561452f565b614d46606083018461452f565b95945050505050565b60006020820190508181036000830152614d69818461458e565b905092915050565b60006020820190508181036000830152614d8a81614677565b9050919050565b60006020820190508181036000830152614daa8161469a565b9050919050565b60006020820190508181036000830152614dca816146bd565b9050919050565b60006020820190508181036000830152614dea816146e0565b9050919050565b60006020820190508181036000830152614e0a81614703565b9050919050565b60006020820190508181036000830152614e2a81614726565b9050919050565b60006020820190508181036000830152614e4a81614749565b9050919050565b60006020820190508181036000830152614e6a8161476c565b9050919050565b60006020820190508181036000830152614e8a816147b2565b9050919050565b60006020820190508181036000830152614eaa816147d5565b9050919050565b60006020820190508181036000830152614eca816147f8565b9050919050565b60006020820190508181036000830152614eea8161481b565b9050919050565b60006020820190508181036000830152614f0a8161483e565b9050919050565b60006020820190508181036000830152614f2a81614861565b9050919050565b60006020820190508181036000830152614f4a81614884565b9050919050565b60006020820190508181036000830152614f6a816148a7565b9050919050565b60006020820190508181036000830152614f8a816148ca565b9050919050565b60006020820190508181036000830152614faa816148ed565b9050919050565b60006020820190508181036000830152614fca81614910565b9050919050565b60006020820190508181036000830152614fea81614933565b9050919050565b6000602082019050818103600083015261500a81614956565b9050919050565b6000602082019050818103600083015261502a81614979565b9050919050565b6000602082019050818103600083015261504a8161499c565b9050919050565b6000602082019050818103600083015261506a816149bf565b9050919050565b6000602082019050818103600083015261508a816149e2565b9050919050565b600060208201905081810360008301526150aa81614a05565b9050919050565b600060208201905081810360008301526150ca81614a28565b9050919050565b600060208201905081810360008301526150ea81614a4b565b9050919050565b6000602082019050818103600083015261510a81614a6e565b9050919050565b6000602082019050818103600083015261512a81614a91565b9050919050565b6000602082019050818103600083015261514a81614ab4565b9050919050565b6000602082019050818103600083015261516a81614ad7565b9050919050565b6000602082019050818103600083015261518a81614afa565b9050919050565b60006020820190506151a66000830184614b2c565b92915050565b60006151b66151c7565b90506151c282826154d3565b919050565b6000604051905090565b600067ffffffffffffffff8211156151ec576151eb615615565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561521857615217615615565b5b61522182615644565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006152ca82615448565b91506152d583615448565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561530a57615309615588565b5b828201905092915050565b600061532082615448565b915061532b83615448565b92508261533b5761533a6155b7565b5b828204905092915050565b600061535182615448565b915061535c83615448565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561539557615394615588565b5b828202905092915050565b60006153ab82615448565b91506153b683615448565b9250828210156153c9576153c8615588565b5b828203905092915050565b60006153df82615428565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561548c578082015181840152602081019050615471565b8381111561549b576000848401525b50505050565b600060028204905060018216806154b957607f821691505b602082108114156154cd576154cc6155e6565b5b50919050565b6154dc82615644565b810181811067ffffffffffffffff821117156154fb576154fa615615565b5b80604052505050565b600061550f82615448565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561554257615541615588565b5b600182019050919050565b6000819050919050565b600061556282615448565b915061556d83615448565b92508261557d5761557c6155b7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f596f752063616e206d696e74206d696e696d756d20312c206d6178696d756d2060008201527f35302073616d75726169732e0000000000000000000000000000000000000000602082015250565b7f53616c65206861736e277420737461727465642e000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f436c61696d65206861736e277420737461727465642e00000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f50726573616c65206861736e277420737461727465642e000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4578636565647320746865204d41585f53414d555241492e0000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f544f4b454e5f4e4f545f45584953545300000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f45786365656420746865207175616e7469747920746861742063616e2062652060008201527f636c61696d656400000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f45746865722076616c75652073656e742069732062656c6f772074686520707260008201527f6963652e00000000000000000000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f53414d555241492e000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e6f7420656c696769626c6520666f722070726573616c652e00000000000000600082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f45786365656473206d61782070726573616c65206e756d6265722e0000000000600082015250565b7f536f6c64206f7574210000000000000000000000000000000000000000000000600082015250565b615e7c816153d4565b8114615e8757600080fd5b50565b615e93816153e6565b8114615e9e57600080fd5b50565b615eaa816153fc565b8114615eb557600080fd5b50565b615ec181615448565b8114615ecc57600080fd5b5056fea2646970667358221220cc9474d8f052385a210224428223fb6856444457f45b468d7c5d5ae7a7992e8d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2856,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "KNS1Address",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2862,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "KNS1Contract",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(KNS1Interface)2841"
      },
      {
        "astId": 2865,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "MAX_SAMURAI",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2868,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "MAX_PRESALE",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2871,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "PRICE",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2874,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "numPresale",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2877,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "numTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2880,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "numClaim",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2883,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "hasSaleStarted",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2886,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "hasPresaleStarted",
        "offset": 1,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2889,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "hasClaimeStarted",
        "offset": 2,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2892,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 2896,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "hasClaimed",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2900,
        "contract": "contracts/KatanaNSamurai2.sol:KatanaNSamurai2",
        "label": "hasPresale",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(KNS1Interface)2841": {
        "encoding": "inplace",
        "label": "contract KNS1Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}